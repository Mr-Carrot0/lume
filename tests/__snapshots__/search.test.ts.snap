export const snapshot = {};

snapshot[`Search by Tags 1`] = `"(data) => data.tags?.includes(value0) && data.tags?.includes(value1)"`;

snapshot[`Search by NOT Tags 1`] = `"(data) => data.tags?.includes(value0) && !data.tags?.includes(value1)"`;

snapshot[`Search by Equal 1`] = `"(data) => data.foo === value0"`;

snapshot[`Search by Equal undefined 1`] = `"(data) => data.foo === value0"`;

snapshot[`Search by Equal null 1`] = `"(data) => data.foo === value0"`;

snapshot[`Search by Upper than 1`] = `"(data) => data.foo > value0"`;

snapshot[`Search by Upper or equals than 1`] = `"(data) => data.foo >= value0"`;

snapshot[`Search by Lower than 1`] = `"(data) => data.foo < value0"`;

snapshot[`Search by Lower or equals than 1`] = `"(data) => data.foo <= value0"`;

snapshot[`Search by Not Equal 1`] = `"(data) => data.foo !== value0"`;

snapshot[`Search by Not Equal alt 1`] = `"(data) => data.foo !== value0"`;

snapshot[`Search by Starts With 1`] = `"(data) => data.foo?.startsWith(value0)"`;

snapshot[`Search by NOT Starts With 1`] = `"(data) => !data.foo?.startsWith(value0)"`;

snapshot[`Search by Ends With 1`] = `"(data) => data.foo?.endsWith(value0)"`;

snapshot[`Search by Contains 1`] = `"(data) => data.foo?.includes(value0)"`;

snapshot[`Search by Tags with OR 1`] = `"(data) => value0.some((i) => data.tags?.includes(i))"`;

snapshot[`Search by Equal with OR 1`] = `"(data) => value0.some((i) => data.foo === i)"`;

snapshot[`Search by Not Equal with OR 1`] = `"(data) => value0.some((i) => data.foo !== i)"`;

snapshot[`Search by Starts With with OR 1`] = `"(data) => value0.some((i) => data.foo?.startsWith(i))"`;

snapshot[`Search by Ends With with OR 1`] = `"(data) => value0.some((i) => data.foo?.endsWith(i))"`;

snapshot[`Search by Contains with OR 1`] = `"(data) => value0.some((i) => data.foo?.includes(i))"`;

snapshot[`Search Date by Equal 1`] = `"(data) => data.foo?.getTime() === value0.getTime()"`;

snapshot[`Search Date by Not Equal 1`] = `"(data) => data.foo?.getTime() !== value0.getTime()"`;

snapshot[`Search Date by lower than 1`] = `"(data) => data.foo?.getTime() < value0.getTime()"`;

snapshot[`Search Date by lower or equals than 1`] = `"(data) => data.foo?.getTime() <= value0.getTime()"`;

snapshot[`Search Date by upper than 1`] = `"(data) => data.foo?.getTime() > value0.getTime()"`;

snapshot[`Search Date by upper or equals than 1`] = `"(data) => data.foo?.getTime() >= value0.getTime()"`;

snapshot[`Sort by one field 1`] = `[Function (anonymous)]`;

snapshot[`Sort by one field DESC 1`] = `[Function (anonymous)]`;

snapshot[`Sort by two fields 1`] = `[Function (anonymous)]`;

snapshot[`Sort by two fields, second is DESC 1`] = `[Function (anonymous)]`;

snapshot[`Sort by two locale fields 1`] = `'function (a, b) { return (a.order == b.order ? (a.title == b.title ? 0 : collator.compare(b.title || "", a.title || "")) : collator.compare(a.order || "", b.order || "")); }'`;

snapshot[`Test the file searcher 1`] = `
[
  "/404.html",
  "/favicon.png",
  "/overrided-page2/index.html",
  "/page5/index.html",
  "/page_3/index.html",
  "/pages/new-name/page7/index.html",
  "/pages/page4/index.html",
  "/pages/page6/index.html",
  "/static/index.html",
  "/styles.css",
]
`;

snapshot[`Test the file searcher 2`] = `
[
  "/favicon.png",
]
`;

snapshot[`Test the file searcher 3`] = `
[
  "/favicon.png",
]
`;

snapshot[`Test undefined values 1`] = `
{
  formats: [
    {
      engines: 0,
      ext: ".page.toml",
      isPage: true,
      loader: [AsyncFunction: toml],
    },
    {
      engines: 1,
      ext: ".page.ts",
      isPage: true,
      loader: [AsyncFunction: module],
    },
    {
      engines: 1,
      ext: ".page.js",
      isPage: true,
      loader: [AsyncFunction: module],
    },
    {
      engines: 0,
      ext: ".page.jsonc",
      isPage: true,
      loader: [AsyncFunction: json],
    },
    {
      engines: 0,
      ext: ".page.json",
      isPage: true,
      loader: [AsyncFunction: json],
    },
    {
      dataLoader: [AsyncFunction: json],
      engines: 0,
      ext: ".json",
      loader: [AsyncFunction: json],
    },
    {
      dataLoader: [AsyncFunction: json],
      engines: 0,
      ext: ".jsonc",
      loader: [AsyncFunction: json],
    },
    {
      engines: 1,
      ext: ".md",
      isPage: true,
      loader: [AsyncFunction: text],
    },
    {
      engines: 1,
      ext: ".markdown",
      isPage: true,
      loader: [AsyncFunction: text],
    },
    {
      dataLoader: [AsyncFunction: module],
      engines: 1,
      ext: ".js",
      loader: [AsyncFunction: module],
    },
    {
      dataLoader: [AsyncFunction: module],
      engines: 1,
      ext: ".ts",
      loader: [AsyncFunction: module],
    },
    {
      engines: 1,
      ext: ".vento",
      isPage: true,
      loader: [AsyncFunction: text],
    },
    {
      engines: 1,
      ext: ".vto",
      isPage: true,
      loader: [AsyncFunction: text],
    },
    {
      dataLoader: [AsyncFunction: toml],
      engines: 0,
      ext: ".toml",
      loader: [AsyncFunction: toml],
    },
    {
      dataLoader: [AsyncFunction: yaml],
      engines: 0,
      ext: ".yaml",
      isPage: true,
      loader: [AsyncFunction: yaml],
    },
    {
      dataLoader: [AsyncFunction: yaml],
      engines: 0,
      ext: ".yml",
      isPage: true,
      loader: [AsyncFunction: yaml],
    },
  ],
  src: [
    "/",
    "/a.md",
    "/b.md",
    "/c.md",
    "/d.md",
    "/index.vto",
  ],
}
`;

snapshot[`Test undefined values 2`] = `[]`;

snapshot[`Test undefined values 3`] = `
[
  {
    content: "<p>Page A</p>
",
    data: {
      basename: "a",
      children: "<p>Page A</p>
",
      content: "Page A",
      date: [],
      mergedKeys: [
        "tags",
      ],
      page: [
        "src",
        "data",
      ],
      paginate: "paginate",
      search: [],
      tags: "Array(0)",
      title: "A",
      url: "/a/",
    },
    src: {
      ext: ".md",
      path: "/a",
      remote: undefined,
    },
  },
  {
    content: "<p>Page B</p>
",
    data: {
      basename: "b",
      children: "<p>Page B</p>
",
      content: "Page B",
      date: [],
      mergedKeys: [
        "tags",
      ],
      page: [
        "src",
        "data",
      ],
      paginate: "paginate",
      search: [],
      tags: "Array(0)",
      url: "/b/",
    },
    src: {
      ext: ".md",
      path: "/b",
      remote: undefined,
    },
  },
  {
    content: "<p>Page C</p>
",
    data: {
      basename: "c",
      children: "<p>Page C</p>
",
      content: "Page C",
      date: [],
      mergedKeys: [
        "tags",
      ],
      page: [
        "src",
        "data",
      ],
      paginate: "paginate",
      search: [],
      tags: "Array(0)",
      title: "C",
      url: "/c/",
    },
    src: {
      ext: ".md",
      path: "/c",
      remote: undefined,
    },
  },
  {
    content: "<p>Page D</p>
",
    data: {
      basename: "d",
      children: "<p>Page D</p>
",
      content: "Page D",
      date: [],
      mergedKeys: [
        "tags",
      ],
      page: [
        "src",
        "data",
      ],
      paginate: "paginate",
      search: [],
      tags: "Array(0)",
      url: "/d/",
    },
    src: {
      ext: ".md",
      path: "/d",
      remote: undefined,
    },
  },
  {
    content: "bdac",
    data: {
      basename: "",
      children: "bdac",
      content: '{{ for post of search.pages("", "title") }}
  {{- post.basename -}}
{{ /for }}
',
      date: [],
      mergedKeys: [
        "tags",
      ],
      page: [
        "src",
        "data",
      ],
      paginate: "paginate",
      search: [],
      tags: "Array(0)",
      title: "Z",
      url: "/",
    },
    src: {
      ext: ".vto",
      path: "/index",
      remote: undefined,
    },
  },
]
`;
